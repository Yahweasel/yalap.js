#!/usr/bin/env node
/*
 * Copyright (C) 2021-2024 Yahweasel
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

const fs = require("fs");
const name = process.argv[2];
const parts = JSON.parse(process.argv[3]);
const files = [
    "bindings.c", "eflags.txt", "exports.txt", "extern-post.js", "libs.txt",
    "license.js", "oo.txt", "post.js"
];
const special = [
    ["exports", "txt"],
    ["extern-post", "js"],
    ["license", "js"]
];

try {
    fs.mkdirSync(name);
} catch (ex) {}

function exists(f) {
    try {
        fs.accessSync(f);
        return true;
    } catch (ex) {
        return false;
    }
}

function addFragment(out, part) {
    if (exists(`fragments/${part}`)) {
        // Add it directly
        for (const file of files) {
            const inF = `fragments/${part}/${file}`;
            if (exists(inF))
                out[file].write(fs.readFileSync(inF));
        }
    }
}


(function() {
    // Open the files
    const out = {};
    for (const file of files)
        out[file] = fs.createWriteStream(`${name}/${file}`);

    // Warning headers
    for (const file of files) {
        if (file === "license.js")
            continue;
        if (/\.js/.test(file) || /\.c/.test(file)) {
            out[file].write("/****************\n * THIS FILE IS AUTOMATICALLY GENERATED\n * DO NOT MODIFY THIS FILE BY HAND\n ***************/\n");
        }
    }

    // Start special files
    for (const file of special) {
        out[`${file[0]}.${file[1]}`].write(
            fs.readFileSync(`fragments/default/${file[0]}-head.${file[1]}`)
        );
    }

    // Construct the fragments
    for (const part of ["default"].concat(parts)) {
        addFragment(out, part);
    }

    // Finish special files
    for (const file of special) {
        out[`${file[0]}.${file[1]}`].write(
            fs.readFileSync(`fragments/default/${file[0]}-tail.${file[1]}`)
        );
    }

    // Mark the OO content needed
    if (parts.indexOf("write") >= 0) {
        if (parts.indexOf("read") >= 0)
            out["oo.txt"].write("oo/yalapo.js\n");
        else
            out["oo.txt"].write("oo/yalapw.js\n");
    } else {
        out["oo.txt"].write("oo/yalapr.js\n");
    }

    // Close everything
    for (const file of files)
        out[file].end();
})();
